// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "foreignKeys"
}

model Organization {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    slug        String   @unique
    description String?
    members     User[]   @relation(name: "member")
}

model Project {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    name        String
    slug        String      @unique
    description String?
    owner       User?       @relation(name: "owner", fields: [ownerId], references: [id])
    ownerId     String?
    student     User?       @relation(name: "student", fields: [studentId], references: [id])
    studentId   String?
    observers   User[]      @relation(name: "observer")
    milestones  Milestone[]
}

model Milestone {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String
    icon        String?
    description String?
    dueDate     DateTime?
    project     Project   @relation(fields: [projectId], references: [id])
    projectId   String
    tasks       Task[]
}

model Task {
    id            String          @id @default(cuid())
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    name          String
    description   String?
    dueDate       DateTime?
    startDate     DateTime?
    completed     Boolean         @default(false)
    milestone     Milestone       @relation(fields: [milestoneId], references: [id])
    milestoneId   String
    documentation Documentation[]
    comments      Comments[]
}

model Documentation {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?
    // content     Json?
    task        Task     @relation(fields: [taskId], references: [id])
    taskId      String
}

model Comments {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String
    task        Task     @relation(fields: [taskId], references: [id])
    taskId      String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    owner         Project[]      @relation(name: "owner")
    student       Project[]      @relation(name: "student")
    observer      Project[]      @relation(name: "observer")
    org_member    Organization[] @relation(name: "member")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
